bash:

- variables don't need to be quoted on the right side of an assignment
  or in [[]]
- $() / `` strip trailing \n
- http://wiki.bash-hackers.org/scripting/bashchanges
- https://wiki.ubuntu.com/DashAsBinSh
- https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.72/html_node/Portable-Shell.html
- https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html
- I'm going to use [] and = unless specifically using bash features (and
  quote variables)
- I'm going to quote all variables including in assignments to build the habit
  of quoting for when it's necessary
- I'm also going to quote text strings for clarity and syntax highlighting
- I'm going to leave quotes off foo=$() because it's not as necessary for habit
  reasons and it tends to make lines hard to read, since $() frequently contains
  quotes
- I'm going to use "" unless strings contain $ or "
  ---
  Enclosing characters in double quotes preserves the literal value of all
  characters within the quotes, with the exception of $, `, \, and, when
  history expansion is enabled, !.
  The backslash retains its special meaning only when followed by one of the
  following characters: $, `, ", \, or <newline>.
- if multiple arguments to a program would otherwise have different quoting, I
  will make them consistent
- I'm going to use '' for sed, awk, single-character delimiters, and tr, unless
  there's a specific reason not to
- old note, kept for reference:
    (aliases used \more)
    - any later aliasing of 'more' ordinarily wouldn't affect these because
      aliases are expanded when functions are defined, not executed
    - but re-sourcing this file afterwards _would_ change the definitions
    - so, use backslashes
    - however, making 'more' a function will still change these
- https://www.in-ulm.de/~mascheck/
- re find + instead of xargs: https://www.in-ulm.de/~mascheck/various/find/
- re ${1+"$@"}: https://www.in-ulm.de/~mascheck/various/bourne_args/
- http://mywiki.wooledge.org/BashFAQ
- re populating an array from $(): http://mywiki.wooledge.org/BashFAQ/005
- http://mywiki.wooledge.org/BashPitfalls


- $# $% vs $## $%% -> affects how much * matches
- ! &&, ! || -> ! tighter than &&, ||
- && and || same precedence, left assoc, short circuit
    - mixing them doesn't always do what you expect
- can use [ ! ... ] but ! [] is technically more portable if using bash
- while-read keeps internal spaces, but removes from beginning and end unless
  IFS=
    - always use IFS= for while-read so can't forget, e.g. with
      compgen -o default and filename with spaces
- while-read needs || [ -n "$line" ] if the last line might not have a newline
    - don't add it everywhere because it's rarely needed and makes code harder
      to read
- compgen with $cur_word needs --
- compgen -W gets word splitting applied to it; might need a workaround like
  grep '^${cur_word}' instead for e.g. testing with the output of a function
- subshells inherit set -eo pipefail
- | loop runs the loop in a subshell (as does | anything)
- <() runs in a subshell but the return value is ignored (which also means it
  won't trigger set -e in the invoking shell)


quoting
" '
=""
[ "" ]
[ "$cur_word" = "2" ]

[] vs []

bashisms, shebangs
bash 4

ERROR: Capital blah.

error blank lines

identifiers

locals

return

+=( 3 )

foo () {
}
_foo
py3latest () { pylatest 3; }

blanks in/between functions

trailing space

printf

$(foo \
bar)

EOF vs -EOF

check returns, incl. cd

minimal foo || bar

! [ ] || ...

shellcheck (except SC1117)

80 char
4 spaces

if is_available pip ||
        is_available pip2 ||

local prev_venv
local global_env
local retval
prev_venv=$(pycur)

s/^version *= *//

if []; then
for i in foo; do

versioning, changelogs

test -e
test -x
test -h must be used rather than the test -L
o.{a,so}
